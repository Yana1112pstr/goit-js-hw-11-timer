{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","setInterval","currentDate","Date","now","time","getTimeComponents","getTime","days","hours","mins","secs","insertData","refs","fieldDays","fieldHours","fieldMins","fieldSecs","document","querySelector","place","value","textContent","Math","floor","String","padStart","timer1","start"],"mappings":";;;AA4DE,aAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA5DF,QAAA,oBAEA,MAAMA,EACHC,aAAa,SAACC,EAAD,WAAWC,IAWf,EAAA,KAAA,QAAA,KAERC,YAAY,KACNC,MAAAA,EAAcC,KAAKC,MAGnBC,EAAOC,EAFK,KAAKN,WAAWO,UAAYL,IAGxC,KAACM,EAAD,MAAOC,EAAP,KAAcC,EAAd,KAAoBC,GAAQN,EAGlCO,EAAW,KAAKC,KAAKC,UAAWN,GAChCI,EAAW,KAAKC,KAAKE,WAAYN,GACjCG,EAAW,KAAKC,KAAKG,UAAWN,GAChCE,EAAW,KAAKC,KAAKI,UAAWN,IAKjC,OA5BMZ,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACba,KAAAA,KAAO,CACRC,UAAYI,SAASC,iBAAiB,KAAKpB,qCAC3CgB,WAAaG,SAASC,iBAAiB,KAAKpB,sCAC5CiB,UAAYE,SAASC,iBAAiB,KAAKpB,qCAC3CkB,UAAYC,SAASC,iBAAiB,KAAKpB,uCA2BnD,SAASa,EAAWQ,EAAOC,GACvBD,EAAME,YAAcD,EAGxB,SAASf,EAAkBD,GACnBG,IAAAA,EAAOe,KAAKC,MAAMnB,EAAQ,OAC9BG,EAAOiB,OAAOjB,GAAMkB,SAAS,EAAG,KAC5BjB,IAAAA,EAAQc,KAAKC,MAAOnB,EAAQ,MAAyB,MACzDI,EAAQgB,OAAOhB,GAAOiB,SAAS,EAAG,KAC9BhB,IAAAA,EAAOa,KAAKC,MAAOnB,EAAQ,KAAoB,KACnDK,EAAOe,OAAOf,GAAMgB,SAAS,EAAG,KAC5Bf,IAAAA,EAAOY,KAAKC,MAAOnB,EAAQ,IAAc,KAGtC,MAAA,CAACG,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAF3BA,EAAOc,OAAOd,GAAMe,SAAS,EAAG,MAMpC,MAAMC,EAAS,IAAI9B,EAAe,CAC9BE,SAAU,WACVC,WAAY,IAAIG,KAAK,kBAGvBwB,EAAOC","file":"src.8fa739e2.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nclass CountdownTimer {\n   constructor ({selector, targetDate}) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.refs = {\n        fieldDays : document.querySelector(`${this.selector} span [data-value=\"days\"]`),\n        fieldHours : document.querySelector(`${this.selector} span [data-value=\"hours\"]`),\n        fieldMins : document.querySelector(`${this.selector} span [data-value=\"mins\"]`),\n        fieldSecs : document.querySelector(`${this.selector} span [data-value=\"secs\"]`)\n    };\n    }\n\n    start = () => {\n\n    setInterval(() => {\n    const currentDate = Date.now()\n    const deltaTime = this.targetDate.getTime() - currentDate\n\n    const time = getTimeComponents(deltaTime)\n    const {days, hours, mins, secs} = time;\n  \n   \n    insertData(this.refs.fieldDays, days);\n    insertData(this.refs.fieldHours, hours);\n    insertData(this.refs.fieldMins, mins);\n    insertData(this.refs.fieldSecs, secs)\n    //this.refs.fieldDays.textContent = days;\n    //this.refs.fieldHours.textContent = hours;\n    //this.refs.fieldMins.textContent = mins;\n    //this.refs.fieldSecs.textContent = secs;\n}, 1000)\n}\n\n}\n\nfunction insertData(place, value) {\n    place.textContent = value\n}\n\nfunction getTimeComponents(time) {\n    let days = Math.floor(time / (1000 * 60 * 60 * 24));\n    days = String(days).padStart(2, \"0\");\n    let hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    hours = String(hours).padStart(2, \"0\");\n    let mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    mins = String(mins).padStart(2, \"0\");\n    let secs = Math.floor((time % (1000 * 60)) / 1000);\n    secs = String(secs).padStart(2, \"0\");\n\n    return {days, hours, mins, secs};\n};\n\n\nconst timer1 = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Dec 31, 2021'),\n  });\n\n  timer1.start();"]}